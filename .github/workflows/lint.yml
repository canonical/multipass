name: Lint

on:
  workflow_call:

permissions:
  contents: read

jobs:
  Lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Check for forbidden tag in code
        shell: bash
        run: |
          # On pull requests, HEAD^1 will always be the merge base, so diff against that. Look for forbidden strings,
          # but exclude legitimate cases.
          forbidden_regex='(?i)\bno[_-]?merge\b'
          added_regex="^\+.*${forbidden_regex}" # we care only about additions
          git diff -U0 --no-color HEAD^1 -- . ':(exclude)bors.toml' |
            (grep -P "${added_regex}" || true) |
            tee ${HOME}/forbidden_occurrences
          if [ "$( stat --printf='%s' ${HOME}/forbidden_occurrences )" -ne 0 ]; then
            echo "##[error] Forbidden string(s) found in the diff ^ (matched \"$added_regex\")"
            exit 1
          fi

      - name: Check whitespace
        uses: ./.github/actions/whitespace
        with:
          exclude: >-
            '3rd-party/'    `# third-party submodules`
            'data/'         `# data files`
            'docs/.sphinx/' `# vendored starter pack`

      - name: Install clang-format
        shell: bash
        run: sudo apt-get install --no-install-recommends --yes clang-format-16

      - name: Run clang-format through the diff
        shell: bash
        run: |
          # Ensure that the .clang-format configuration is valid
          clang-format-16  --dump-config > /dev/null

          # On pull requests, HEAD^1 will always be the merge base, so consider that diff for formatting.
          git diff -U0 --no-color HEAD^1 | clang-format-diff-16 -p1 | tee ${HOME}/clang-diff
          if [ "$( stat --printf='%s' ${HOME}/clang-diff )" -ne 0 ]; then
            echo "##[error] Please apply the above diff to correct formatting"
            exit 1
          fi

      - name: Initialize Flutter submodule and verify installation
        shell: bash
        run: |
          git submodule update --init 3rd-party/flutter
          if [ ! -f "3rd-party/flutter/bin/dart" ]; then
            echo -n "##[error] Flutter submodule not initialized. "
            echo "Run 'git submodule update --init 3rd-party/flutter' to fix this issue."
            exit 1
          fi

      - name: Run Flutter format check
        shell: bash
        run: |
          # Fetch flutter deps before running the formatter as it can influence the outcome.
          3rd-party/flutter/bin/flutter pub get -C src/client/gui/
          if ! 3rd-party/flutter/bin/dart format --output=none --set-exit-if-changed src/client/gui; then
            echo -n "##[error] Flutter code is not properly formatted. "
            echo "Run '3rd-party/flutter/bin/dart format' to fix formatting."
            exit 1
          fi

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run Rust format check
        shell: bash
        run: |
          if [ -f "Cargo.toml" ]; then
            if ! cargo fmt --all --check; then
              echo -n "##[error] Rust code is not properly formatted. "
              echo "Run 'cargo fmt --all' to fix formatting."
              exit 1
            fi
          else
            echo "No Cargo.toml found, skipping Rust format check"
          fi
