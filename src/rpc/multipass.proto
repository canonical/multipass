// Copyright (C) Canonical, Ltd.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 3 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

syntax = "proto3";
package multipass;

import "google/protobuf/timestamp.proto";

service Rpc {
    rpc create (stream LaunchRequest) returns (stream LaunchReply);
    rpc launch (stream LaunchRequest) returns (stream LaunchReply);
    rpc purge (stream PurgeRequest) returns (stream PurgeReply);
    rpc find (stream FindRequest) returns (stream FindReply);
    rpc info (stream InfoRequest) returns (stream InfoReply);
    rpc list (stream ListRequest) returns (stream ListReply);
    rpc networks (stream NetworksRequest) returns (stream NetworksReply);
    rpc mount (stream MountRequest) returns (stream MountReply);
    rpc ping (PingRequest) returns (PingReply);
    rpc recover (stream RecoverRequest) returns (stream RecoverReply);
    rpc ssh_info (stream SSHInfoRequest) returns (stream SSHInfoReply);
    rpc start (stream StartRequest) returns (stream StartReply);
    rpc stop (stream StopRequest) returns (stream StopReply);
    rpc suspend (stream SuspendRequest) returns (stream SuspendReply);
    rpc restart (stream RestartRequest) returns (stream RestartReply);
    rpc delet (stream DeleteRequest) returns (stream DeleteReply);
    rpc umount (stream UmountRequest) returns (stream UmountReply);
    rpc version (stream VersionRequest) returns (stream VersionReply);
    rpc get (stream GetRequest) returns (stream GetReply);
    rpc set (stream SetRequest) returns (stream SetReply);
    rpc keys (stream KeysRequest) returns (stream KeysReply);
    rpc authenticate (stream AuthenticateRequest) returns (stream AuthenticateReply);
    rpc snapshot (stream SnapshotRequest) returns (stream SnapshotReply);
    rpc restore (stream RestoreRequest) returns (stream RestoreReply);
    rpc clone (stream CloneRequest) returns (stream CloneReply);
    rpc daemon_info (stream DaemonInfoRequest) returns (stream DaemonInfoReply);
}

message LaunchRequest {
    string instance_name = 1;
    string image = 2;
    string kernel_name = 3;
    int32 num_cores = 4;
    string mem_size = 5; // units?
    string disk_space = 6; // units?
    string time_zone = 7;
    string cloud_init_user_data = 8;
    string remote_name = 9;
    int32 verbosity_level = 11;

    message NetworkOptions {
        enum Mode {
            AUTO = 0;
            MANUAL = 1;
        }

        string id = 1;
        Mode mode = 2;
        string mac_address = 3;
    }
    repeated NetworkOptions network_options = 12;
    bool permission_to_bridge = 13;
    int32 timeout = 14;
    string password = 15;
}

message LaunchError {
    enum ErrorCodes {
        OK = 0;
        INVALID_MEM_SIZE = 1;
        INVALID_DISK_SIZE = 2;
        INVALID_HOSTNAME = 3;
        INVALID_NETWORK = 4;
    }
    repeated ErrorCodes error_codes = 1;
}

message LaunchProgress {
    enum ProgressTypes {
        IMAGE = 0;
        EXTRACT = 1;
        VERIFY = 2;
        WAITING = 3;
    }
    ProgressTypes type = 1;
    string percent_complete = 2;
}

message UpdateInfo {
    string version = 1;
    string url = 2;
    string title = 3;
    string description = 4;
}

message LaunchReply {
    message Alias {
        string name = 1;
        string instance = 2;
        string command = 3;
        string working_directory = 4;
    }
    oneof create_oneof {
        string vm_instance_name = 1;
        LaunchProgress launch_progress = 2;
        string create_message = 3;
    }
    string log_line = 6;
    UpdateInfo update_info = 7;
    string reply_message = 8;
    repeated string nets_need_bridging = 9;
    repeated Alias aliases_to_be_created = 10;
    repeated string workspaces_to_be_created = 11;
    bool password_requested = 12;
}

message PurgeRequest {
    int32 verbosity_level = 1;
}

message PurgeReply {
    string log_line = 1;
    repeated string purged_instances = 2;
}

message FindRequest {
    string search_string = 1;
    string remote_name = 2;
    int32 verbosity_level = 3;
    bool allow_unsupported = 4;
    bool show_images = 5;
    bool show_blueprints = 6;
    bool force_manifest_network_download = 7;
}

message FindReply {
    message AliasInfo {
        string remote_name = 1;
        string alias = 2;
    }
    message ImageInfo {
        string os = 1;
        string release = 2;
        string version = 3;
        repeated AliasInfo aliases_info = 4;
        string codename = 5;
    }
    bool show_images = 1;
    bool show_blueprints = 2;
    repeated ImageInfo images_info = 3;
    repeated ImageInfo blueprints_info = 4;
    string log_line = 5;
}

message InstanceSnapshotPair {
    string instance_name = 1;
    optional string snapshot_name = 2; // if this is present, the msg specifies a snapshot; otherwise, an instance
}

message InfoRequest {
    repeated InstanceSnapshotPair instance_snapshot_pairs = 1;
    int32 verbosity_level = 3;
    bool no_runtime_information = 4;
    bool snapshots = 5;
}

message IdMap {
    int32 host_id = 1;
    int32 instance_id = 2;
}

message MountMaps {
    repeated IdMap uid_mappings = 1;
    repeated IdMap gid_mappings = 2;
}

message MountInfo {
    message MountPaths {
        string source_path = 1;
        string target_path = 2;
        MountMaps mount_maps = 3;
    }
    uint32 longest_path_len = 1;
    repeated MountPaths mount_paths = 2;
}

message InstanceStatus {
    enum Status {
        UNKNOWN = 0;
        RUNNING = 1;
        STARTING = 2;
        RESTARTING = 3;
        STOPPED = 4;
        DELETED = 5;
        DELAYED_SHUTDOWN = 6;
        SUSPENDING = 7;
        SUSPENDED = 8;
    }
    Status status = 1;
}

message InstanceDetails {
    string image_release = 1;
    string current_release = 2;
    string id = 3;
    string load = 4;
    string memory_usage = 5;
    string disk_usage = 6;
    repeated string ipv4 = 7;
    repeated string ipv6 = 8;
    optional int32 num_snapshots = 9;
    string cpu_times = 10;
    string uptime = 11;
    google.protobuf.Timestamp creation_timestamp = 12;
}

message SnapshotFundamentals {
    string snapshot_name = 1;
    string parent = 2;
    string comment = 3;
    google.protobuf.Timestamp creation_timestamp = 4;
}

message SnapshotDetails {
    SnapshotFundamentals fundamentals = 1;
    string size = 2;
    repeated string children = 4;
}

message DetailedInfoItem {
    string name = 1;
    InstanceStatus instance_status = 2;
    string memory_total = 3;
    string disk_total = 4;
    string cpu_count = 5;
    MountInfo mount_info = 6;

    oneof extra_info {
        InstanceDetails instance_info = 7;
        SnapshotDetails snapshot_info = 8;
    }
}

message InfoReply {
    repeated DetailedInfoItem details = 1;
    bool snapshots = 2; // useful to determine what entity (instance/snapshot) was absent when details are empty
    string log_line = 3;
    UpdateInfo update_info = 4;
}

message ListRequest {
    int32 verbosity_level = 1;
    bool snapshots = 2;
    bool request_ipv4 = 3;
}

message ListVMInstance {
    string name = 1;
    InstanceStatus instance_status = 2;
    repeated string ipv4 = 3;
    repeated string ipv6 = 4;
    string current_release = 5;
}

message ListVMSnapshot {
    string name = 1;
    SnapshotFundamentals fundamentals = 2;
}

message InstancesList {
    repeated ListVMInstance instances = 1;
}

message SnapshotsList {
    repeated ListVMSnapshot snapshots = 1;
}

message ListReply {
    oneof list_contents
    {
        InstancesList instance_list = 1;
        SnapshotsList snapshot_list = 2;
    }

    string log_line = 3;
    UpdateInfo update_info = 4;
}

message NetworksRequest {
    int32 verbosity_level = 1;
}

message NetInterface {
    string name = 1;
    string type = 2;
    string description = 3;
}

message NetworksReply {
    repeated NetInterface interfaces = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}

message TargetPathInfo {
    string instance_name = 1;
    string target_path = 2;
}

message MountRequest {
    enum MountType {
        CLASSIC = 0;
        NATIVE = 1;
    }
    string source_path = 1;
    repeated TargetPathInfo target_paths = 2;
    MountMaps mount_maps = 3;
    int32 verbosity_level = 4;
    MountType mount_type = 5;
    string password = 6;
}

message MountReply {
    string log_line = 1;
    string reply_message = 2;
    bool password_requested = 3;
}

message PingRequest {
}

message PingReply {
}

message InstanceNames {
    repeated string instance_name = 1;
}

message RecoverRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message RecoverReply {
    string log_line = 1;
}

message SSHInfoRequest {
    repeated string instance_name = 1;
    int32 verbosity_level = 2;
}

message SSHInfo {
    int32 port = 1;
    string priv_key_base64 = 2;
    string host = 3;
    string username = 4;
}

message SSHInfoReply {
    map<string, SSHInfo> ssh_info = 1;
    string log_line = 2;
}

message StartError {
    enum ErrorCode {
        OK = 0;
        DOES_NOT_EXIST = 1;
        INSTANCE_DELETED = 2;
        OTHER = 3;
    }
    map<string, ErrorCode> instance_errors = 1;
}

message StartRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
    int32 timeout = 3;
    string password = 4;
}

message StartReply {
    string log_line = 1;
    string reply_message = 2;
    UpdateInfo update_info = 3;
    bool password_requested = 4;
}

message StopRequest {
    InstanceNames instance_names = 1;
    int32 time_minutes = 2;
    bool cancel_shutdown = 3;
    int32 verbosity_level = 4;
    bool force_stop = 5;
}

message StopReply {
    string log_line = 1;
}

message SuspendRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
}

message SuspendReply {
    string log_line = 1;
}

message RestartRequest {
    InstanceNames instance_names = 1;
    int32 verbosity_level = 2;
    int32 timeout = 3;
    string password = 4;
}

message RestartReply {
    string log_line = 1;
    string reply_message = 2;
    UpdateInfo update_info = 3;
    bool password_requested = 4;
}

message DeleteRequest {
    repeated InstanceSnapshotPair instance_snapshot_pairs = 1;
    bool purge = 2;
    int32 verbosity_level = 3;
    bool purge_snapshots = 4;
}

message DeleteReply {
    string log_line = 1;
    repeated string purged_instances = 2;
    bool confirm_snapshot_purging = 3;
}

message UmountRequest {
    repeated TargetPathInfo target_paths = 1;
    int32 verbosity_level = 2;
}

message UmountReply {
    string log_line = 1;
}

message VersionRequest {
    int32 verbosity_level = 1;
}

message VersionReply {
    string version = 1;
    string log_line = 2;
    UpdateInfo update_info = 3;
}

message GetRequest {
    string key = 1;
    int32 verbosity_level = 2;
}

message GetReply {
    string value = 1;
    string log_line = 2;
}

message SetRequest {
    string key = 1;
    string val = 2;
    int32 verbosity_level = 3;
    bool authorized = 4;
}

message SetReply {
    string log_line = 1;
    string reply_message = 2;
    bool needs_authorization = 3;
}

message KeysRequest {
    int32 verbosity_level = 1;
}

message KeysReply {
    string log_line = 1;
    repeated string settings_keys = 2;
}

message AuthenticateRequest {
    string passphrase = 1;
    int32 verbosity_level = 2;
}

message AuthenticateReply {
    string log_line = 1;
}

message SnapshotRequest {
    string instance = 1;
    string snapshot = 2;
    string comment = 3;
    int32 verbosity_level = 4;
}

message SnapshotReply {
    string snapshot = 1; // automatically generated unless specifically requested
    string log_line = 2;
}

message RestoreRequest {
    string instance = 1;
    string snapshot = 2;
    bool destructive = 3;
    int32 verbosity_level = 4;
}

message RestoreReply {
    string log_line = 1;
    string reply_message = 2;
    bool confirm_destructive = 3;
}

message CloneRequest {
    string source_name = 1;
    optional string destination_name = 2;
    int32 verbosity_level = 3;
}

message CloneReply {
    string reply_message = 1;
    string log_line = 2;
}
message DaemonInfoRequest {
    int32 verbosity_level = 1;
}

message DaemonInfoReply {
    string log_line = 1;
    uint64 available_space = 2;
    uint32 cpus = 3;
    uint64 memory = 4;
}
